import React from 'react';
import PropTypes from 'prop-types';
import { Checkbox as CheckboxOF, IIconProps, ITheme } from 'office-ui-fabric-react';
import pickWithValues from "../../utils/pickWithValues";

export interface CheckboxProps {
    ariaDescribedBy?: string;
    ariaLabel?: string;
    ariaLabelledBy?: string;
    ariaPositionInSet?: number;
    ariaSetSize?: number;
    boxSide?: 'start'|'end';
    checked?: boolean;
    checkmarkIconProps?: IIconProps;
    className?: string;
    defaultChecked?: boolean;
    defaultIndeterminate?: boolean;
    disabled?: boolean;
    indeterminate?: boolean;
    label?: string;
    onChange?: (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => void;
    styles?: any;
    theme?: ITheme;
}

/**
 * Checkbox is generated by Webcodesk. Replace this comment with a valuable description.
 */
class Checkbox extends React.Component<CheckboxProps, any> {

    static propTypes: PropTypes.InferProps<CheckboxProps> = {
        /**
         * ID for element that provides extended information for the checkbox.
         */
        ariaDescribedBy: PropTypes.string,
        /**
         * Accessible label for the checkbox.
         */
        ariaLabel: PropTypes.string,
        /**
         * ID for element that contains label information for the checkbox.
         */
        ariaLabelledBy: PropTypes.string,
        /**
         * The position in the parent set (if in a set) for aria-posinset.
         */
        ariaPositionInSet: PropTypes.number,
        /**
         * The total size of the parent set (if in a set) for aria-setsize.
         */
        ariaSetSize: PropTypes.number,
        /**
         * Allows you to set the checkbox to be at the before (start) or after (end) the label.
         * @defaultvalue 'start'
         */
        boxSide: PropTypes.oneOf(['start', 'end']),
        /**
         * Checked state. Mutually exclusive to "defaultChecked". Use this if you control the checked state at
         * a higher level and plan to pass in the correct value based on handling onChange events and re-rendering.
         */
        checked: PropTypes.bool,
        /**
         * Custom icon props for the check mark rendered by the checkbox
         */
        checkmarkIconProps: PropTypes.any,
        /**
         * Additional class name to provide on the root element, in addition to the ms-Checkbox class.
         */
        className: PropTypes.string,
        /**
         * Default checked state. Mutually exclusive to "checked". Use this if you want an uncontrolled component,
         * and want the Checkbox instance to maintain its own state.
         */
        defaultChecked: PropTypes.bool,
        /**
         * Optional uncontrolled indeterminate visual state for checkbox. Setting indeterminate state takes visual
         * precedence over checked or defaultChecked props given but does not affect checked state. This is not
         *  a toggleable state. On load the checkbox will receive indeterminate visual state and after the user's
         *  first click it will be removed exposing the true state of the checkbox.
         */
        defaultIndeterminate: PropTypes.bool,
        /**
         * Disabled state of the checkbox.
         */
        disabled: PropTypes.bool,
        /**
         * Optional controlled indeterminate visual state for checkbox. Setting indeterminate state takes visual
         * precedence over checked or defaultChecked props given but does not affect checked state. This should not
         * be a toggleable state. On load the checkbox will receive indeterminate visual state and after the first
         * user click it should be removed by your supplied onChange callback function exposing the true state of
         * the checkbox.
         */
        indeterminate: PropTypes.bool,
        /**
         * Label to display next to the checkbox.
         */
        label: PropTypes.string,
        /**
         * Callback that is called when the checked value has changed.
         */
        onChange: PropTypes.func,
        /**
         * Call to provide customized styling that will layer on top of the variant rules.
         */
        styles: PropTypes.object,
        /**
         * Theme provided by HOC.
         */
        theme: PropTypes.any,
    };

    static defaultProps: CheckboxProps = {
        boxSide: 'start',
    };

    // constructor(props: CheckboxProps) {
    //    super(props);
    // }

    handleCheckboxChange = (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean): void => {
        if (ev) {
            ev.stopPropagation();
            ev.preventDefault();
        }
        console.log("onChange - is checked", checked)
        if (this.props.onChange) {
            this.props.onChange(ev, checked);
        }
    };

    render() {
        const {ariaDescribedBy, ariaLabel, ariaLabelledBy, ariaPositionInSet, ariaSetSize,
            boxSide, checked, checkmarkIconProps, className, defaultChecked, defaultIndeterminate,
            disabled, indeterminate, label, styles, theme} = this.props;
        const properties = pickWithValues({ariaDescribedBy, ariaLabel, ariaLabelledBy, ariaPositionInSet,
            ariaSetSize, boxSide, checked, checkmarkIconProps, className, defaultChecked, defaultIndeterminate,
            disabled, indeterminate, label, styles, theme});
        return (
            <CheckboxOF
                {...properties}
                onChange={this.handleCheckboxChange}
            />
        );
    }
}

export default Checkbox;
